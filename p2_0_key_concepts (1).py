"""
    Глава 2 Ключевые понятия Python

    Введение

В этой главе будут рассмотрены ключевые понятия Python (классы, объекты, методы, атрибуты класса и
атрибуты объекта, функции и процедуры, пользовательские и встроенные функции, параметры и аргументы
функции, атрибуты функции, модули, литералы).

Материал этой и предыдущей главы позволит пользователю более эффективно и осознанно осваивать
информацию по Python из различных источников, а также позволит писать код своих первых программ.

Классы подробно будут рассмотрены в курсе объектно-ориентированного программирования Python.
Создание и использование пользовательских и встроенных функций будет рассмотрено в следующих главах.



    1. Классы

Python  это объектно-ориентированный язык в котором делается упор на объекты в отличие от
процедурно-ориентированного языка, где основной упор делается на функции/процедуры.
В Python всё является объектами - функции и строки и списки и словари и всё остальное.

* Класс (Class) — это шаблон или проект для создания объектов (экземпляров класса). Он описывает,
какие атрибуты (переменные состояния) могут использоваться с объектом данного типа и какие методы
(функции поведения) будут эти данные обрабатывать.
Например класс машина - это описание абстрактной машины без конкретных значений но определяющее
какие именно атрибуты будут использоваться (марка, год выпуска, мощность, пробег, ...) и какие
методы с ними будут выполняются (вывести информацию о машине, рассчитать остаточную стоимость, ..).

Класс можно сравнить с планом, по которому создаются объекты.
Каждый созданный класс объединяет в себе данные (атрибуты) и методы (функции) и образует новый тип
данных.

Синтаксис: Класс определяется с помощью ключевого слова class и имени класса - class ClassName:

Пример:
"""
# Создание класса
class Car: 
    def __init__(self, brand, model, year):
        # Атрибуты
        self.brand = brand
        self.model = model
        self.year = year

# Метод класса
    def display_info(self):
        print(f"{self.year} {self.brand} {self.model}")
"""



    2. Объекты

* Объект (Instance) или экземпляр класса — это конкретная сущность с конкретными значениями
атрибутов, которые могут обрабатываться методами, описанными в классе.
Например объект моя машина - это конкретная машина (BMW, 2020, 86 лс, ..)

Это означает, что каждый объект в Python имеет метод и значение потому что все объекты основаны на
классах.

Синтаксис: Объекты создаются вызовом класса как функции (указывается имя класса и значения или
переменные имеющие значение для атрибутов объекта).

Пример:
"""
print('\n2. Объекты')

# Создание объекта - экземпляра класса
my_car = Car("Toyota", "Corolla", 2020)

# Вызов метода объекта
my_car.display_info()  # Выведет: 2020 Toyota Corolla
"""



    3. Методы

* Методы объекта — это функции или процедуры, которые определены в классе, работают с экземплярами
класса и могут изменять их состояние, имеют доступ к атрибутам и другим методам объекта через self.
Для создания метода объекта достаточно определить функцию внутри класса. Первый параметр метода
всегда должен быть self, он представляет собой сам экземпляр класса.
Методы объекта вызываются на экземпляре класса, в виде: имя_объекта.имя_метода(параметры). 
my_car.display_info() — это применение к объекту my_car метода display_info без параметров.

Необходимо отметить что существуют также методы класса и статические методы, которые будут
рассмотрены в курсе объектно-ориентированное программирование ООП.

Следует различать атрибуты класса, атрибуты объекта и атрибуты функции (см ниже).



    4. Атрибуты класса

* Атрибут класса (class attribute) — это переменная, которая принадлежит самому классу. Она
одинакова для всех экземпляров этого класса (объектов). Атрибуты класса определяются внутри класса,
но вне любых методов. Атрибут класса доступен через класс и его экземпляры. Изменение атрибута
класса через класс изменяет его для всех экземпляров.
Если вы попытаетесь изменить атрибут класса через экземпляр, вы создаете новый атрибут объекта с тем
же именем, который будет скрывать атрибут класса только для этого экземпляра. Это не изменит атрибут
класса для этого объекта или для других экземпляров.

Атрибуты класса вызываются через класс или через экземпляр аналогично методам класса, в виде:
имя_класса.имя_атрибута_класса или имя_объекта.имя_атрибута_класса. 
"""
print('\n4. Атрибуты класса')

class MyClass:
    # Атрибут класса
    class_attribute = 42  

# Доступ к атрибуту класса через класс
print(MyClass.class_attribute)  # Вывод: 42

# Создание экземпляра класса
obj_1 = MyClass()

# Доступ к атрибуту класса через экземпляр
print(obj_1.class_attribute)  # Вывод: 42

obj_2 = MyClass()
print(obj_2.class_attribute)  # Вывод: 42

# Изменение атрибута класса через класс изменяет его для всех экземпляров класса
MyClass.class_attribute = 10
print(obj_1.class_attribute)  # Вывод: 10
print(obj_2.class_attribute)  # Вывод: 10

# Изменение атрибута класса через объект создает новый атрибут обьекта с тем же именем и
# не изменяет атрибут класса для всех экземпляров
obj_1.class_attribute = 5
print(obj_1.class_attribute)  # Вывод: 5
print(obj_2.class_attribute)  # Вывод: 10

# Удаление атрибута объекта с таким же именем как у атрибута класса делает атрибут класса доступным
del obj_1.class_attribute
print(obj_1.class_attribute)  # Вывод: 10
"""



    5. Атрибуты объекта

* Атрибут объекта (instance attribute) — это переменная, которая принадлежит конкретному экземпляру
класса. У каждого экземпляра класса могут быть свои собственные значения этих атрибутов. Атрибуты
объекта обычно определяются в методе __init__ или других методах класса.
Атрибут объекта доступен через экземпляр класса. Изменение атрибута объекта не влияет на другие
экземпляры.

Атрибуты объекта вызываются через экземпляр аналогично методам и атрибутам класса, в виде:
имя_объекта.имя_атрибута_класса.

Пример:
"""
print('\n5. Атрибуты объекта')

class MyClass:
    def __init__(self, value):
        # Атрибут объекта
        self.instance_attribute = value  

# Создание экземпляров класса
obj1 = MyClass(10)
obj2 = MyClass(20)

# Доступ к атрибутам объекта через объект
print(obj1.instance_attribute)  # Вывод: 10
print(obj2.instance_attribute)  # Вывод: 20

# Изменение атрибута объекта через объект изменяет его только для данного экземпляра класса
obj1.instance_attribute = 15
print(obj1.instance_attribute)  # Вывод: 15
print(obj2.instance_attribute)  # Вывод: 20
"""



    6. Функции и Процедуры

Функция, Процедура - часто синонимы, но эти понятия могут иметь некоторые отличия.

* Функция - это блок кода который вызывается по имени и выполняет какую-либо определенную задачу.
Функции могут использоваться многократно и помогают структурировать код.
Функции в Python могут принимать какие-либо аргументы или нет, а также могут возвращать или не
возвращать значения.
Функции определяются с помощью ключевого слова def.

* Процедура (часто синоним функции) - подпрограмма, которая только выполняет операции, но не
возвращает значение.

Часто под функцией понимают блок кода возвращающий значение а под процедурой не возвращающий
значение.



    7. Пользовательские функции

* Пользовательская функция - это блок кода, написанный пользователем, который выполняет определённую
задачу и может быть повторно использован. Функции могут принимать или не принимать входные данные
(аргументы) и возвращать или не возвращать выходные данные (результат).

Пример:
"""
print('\n7. Пользовательские функции 8. Параметры и аргументы функции')
# Определение функции с именем add и параметрами функции a и b
def add(a, b):  
    return a + b

# Переменной x присвоено значение 5
x = 5

# Вызов функции и передача в функцию аргументов x и 5, где x - переменная имеющая значение;
# 5 - литерал (значение)
y = add(x, 6)
print(y) # 11
"""



    8. Параметры и аргументы функции

* Параметры функции — это переменные, которые задаются при объявлении функции. Параметры функции
доступны только внутри тела функции и определяют, какие значения могут быть переданы функции при её
вызове.

* Аргументы функции — это фактические значения (литералы или переменные имеющие значение), которые
передаются в функцию при её вызове. Они соответствуют параметрам функции и служат для выполнения
логики функции.

Пример - смотри выше.



    9. Атрибуты функции

* Атрибут функции (function attribute) — это переменная, определенная внутри функции или присвоенная
функции, которая позволяет хранить дополнительные данные, связанные с функцией. Эти атрибуты могут
быть добавлены динамически и могут использоваться для хранения состояния функции, метаданных или
других вспомогательных данных. Атрибуты функции не влияют на выполнение логики самой функции.

Атрибуты функции вызываются через имя функции аналогично методам и атрибутам класса и объекта, в
виде: имя_функции.имя_атрибута.

Атрибуты функции являются частью объекта функции и могут быть доступны из любой части программы,
имеющей доступ к данной функции.

Пример:
"""
print('\n9. Атрибуты функции')

def greet():
    return "Hello, World!"

# Добавление атрибута функции после ее создания, который можно использовать как счетчик вызовов
greet.counter = 0

# Изменение и использование атрибута функции
greet.counter += 1
print(greet.counter)  # Вывод: 1

"""

Основные атрибуты встроенных функций в Python:
__name__: Имя функции.
__doc__: Документирующая строка функции.
__annotations__: Аннотации типов аргументов и возвращаемого значения.
__module__: Имя модуля, в котором была определена функция.
__defaults__: Значения аргументов по умолчанию.
__code__: Объект, представляющий байт-код функции.
__globals__: Словарь глобальных переменных, доступных функции.
__dict__: Словарь атрибутов функции (включает пользовательские атрибуты).
__closure__: Содержит информацию о свободных переменных для замыканий.
__kwdefaults__: Значения аргументов по умолчанию для именованных аргументов (если имеются).



    10. Модули

* Модуль — это файл с расширением .py, содержащий коллекцию переменных, функций и классов,
предназначенных для решения задач в определенной области. Используя модули, можно разделить сложную
программу на более мелкие, управляемые части или повторно использовать один и тот же код в разных
программах. Модули позволяют улучшить структуру и читаемость кода.

Стандартная библиотека Python включает множество модулей, которые предоставляют широкий спектр
функциональных возможностей. Вот обзор некоторых из основных модулей.

* Модули для работы с файлами и операционной системой:
    - os: Позволяет взаимодействовать с операционной системой, выполнять операции с файлами и
        каталогами, управлять путями, процессами и т.д.
    - sys: Предоставляет доступ к некоторым переменным и функциям, взаимодействующим с
        интерпретатором Python.
    - shutil: Включает функции для выполнения операций с файлами и каталогами, такие как
        копирование, перемещение, удаление и т.д.
    - pathlib: Обеспечивает объектно-ориентированный интерфейс для работы с файловыми путями.

* Модули для работы с данными и текстом:
    - json: Позволяет кодировать и декодировать данные в формате JSON.
    - csv: Обеспечивает функциональность для чтения и записи файлов CSV.
    - re: Модуль для работы с регулярными выражениями, который позволяет выполнять сложные текстовые
        операции.
    - xml.etree.ElementTree: Предоставляет возможности для парсинга и создания XML-документов.

* Модули для работы с интернетом и сетевыми протоколами:
    - urllib: Набор модулей для работы с URL-адресами, включая запросы HTTP.
    - http.client: Обеспечивает функции для работы с клиентскими HTTP-запросами.
    - socket: Включает низкоуровневые функции для работы с сетевыми сокетами.
    - smtplib: Позволяет отправлять электронные письма через SMTP.

* Модули для работы с временем и датой:
    - datetime: Включает классы для работы с датами и временем.
    - time: Обеспечивает функции для работы с системным временем.
    - calendar: Позволяет работать с календарями, генерировать календари и выполнять связанные с
        ними операции.

* Модули для выполнения математических операций и статистики:
    - math: Содержит основные математические функции, такие как синус, косинус, логарифмы и т.д.
    - statistics: Предоставляет функции для выполнения статистических операций.
    - random: Включает функции для генерации случайных чисел и выполнения операций, связанных со
        случайностью.

* Модули для управления коллекциями данных:
    - collections: Включает специализированные контейнерные типы данных, такие как deque, Counter,
        OrderedDict и другие.
    - itertools: Обеспечивает функции для создания эффективных итераторов.

* Модули для управления процессами и потоками:
    - subprocess: Позволяет запускать и управлять подпроцессами.
    - threading: Предоставляет возможности для работы с потоками.
    - multiprocessing: Включает функции для параллельного выполнения задач с использованием
        нескольких процессов.

* Модули для тестирования и отладки:
    - unittest: Встроенный модуль для написания и выполнения тестов.
    - logging: Обеспечивает гибкую систему логирования для отслеживания и отладки приложений.

* Модули для работы с графическим интерфейсом
    - tkinter: Включает функции для создания графических интерфейсов (GUI) на основе Tcl/Tk.

Этот список охватывает лишь некоторые из наиболее часто используемых модулей стандартной библиотеки
Python. Библиотека содержит много других модулей, предоставляющих дополнительные функциональные
возможности для решения разнообразных задач.



    11. Встроенные функции

* Встроенные функции Python (или built-in functions) — это функции, которые доступны в языке Python
по умолчанию и могут быть использованы без необходимости импортирования дополнительных модулей. Эти
функции обеспечивают основной функционал, необходимый для выполнения повседневных задач
программирования. Встроенные функции охватывают широкий спектр операций, таких как обработка строк,
чисел, коллекций, выполнение ввода-вывода и многое другое.

Встроенные функции предоставляют базовый функционал, необходимый для повседневного программирования.
Вот обзор основных встроенных функций.

* Функции для работы с типами данных:
    - abs(x): Возвращает абсолютное значение числа x.
    - bool([x]): Преобразует значение x в логическое значение (True или False).
    - int([x]): Преобразует значение x в целое число.
    - float([x]): Преобразует значение x в число с плавающей запятой.
    - str([x]): Преобразует значение x в строку.
    - list([iterable]): Создает список из итерируемого объекта.
    - dict([mapping]): Создает словарь.
    - set([iterable]): Создает множество.
    
* Функции для работы с последовательностями и итерациями:
    - len(s): Возвращает длину объекта (списка, строки, множества и т.д.).
    - enumerate(iterable, start=0): Возвращает объект, который производит пары индекс-значение из
        итерируемого объекта.
    - zip(*iterables): Создает итератор, который агрегирует элементы из нескольких итерируемых
        объектов.
    - sorted(iterable, key=None, reverse=False): Возвращает отсортированный список из элементов
        итерируемого объекта.
    - reversed(seq): Возвращает обратный итератор.
    - range(start, stop[, step]): Создает последовательность чисел от start до stop с шагом step.

* Функции для работы с функциями и объектами:
    - callable(object): Проверяет, является ли объект вызываемым (функцией, методом и т.д.).
    - getattr(object, name[, default]): Возвращает значение атрибута объекта.
    - setattr(object, name, value): Устанавливает значение атрибута объекта.
    - hasattr(object, name): Проверяет, имеет ли объект указанный атрибут.
    - delattr(object, name): Удаляет атрибут объекта.

* Функции для преобразования данных:
    - chr(i): Возвращает строку, представляющую символ с кодом i.
    - ord(c): Возвращает код символа c.
    - hex(x): Преобразует целое число x в шестнадцатеричную строку.
    - bin(x): Преобразует целое число x в двоичную строку.
    - oct(x): Преобразует целое число x в восьмеричную строку.

* Функции для работы с файлами и вводом/выводом:
    - open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True,
        opener=None): Открывает файл и возвращает соответствующий объект файла.
    - input([prompt]): Запрашивает у пользователя ввод.
    - print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False): Выводит объекты в поток
        вывода.

* Логические функции и функции сравнения:
    - all(iterable): Возвращает True, если все элементы итерируемого объекта истинны.
    - any(iterable): Возвращает True, если хотя бы один элемент итерируемого объекта истинен.
    - max(iterable, *[, key, default]): Возвращает наибольший элемент итерируемого объекта.
    - min(iterable, *[, key, default]): Возвращает наименьший элемент итерируемого объекта.
    - sum(iterable, /, start=0): Возвращает сумму элементов итерируемого объекта.

* Функции для работы с памятью и внутренними объектами:
    - id(object): Возвращает уникальный идентификатор объекта.
    - type(object): Возвращает тип объекта.
    - isinstance(object, classinfo): Проверяет, является ли объект экземпляром указанного класса или
        кортежа классов.
    - issubclass(class, classinfo): Проверяет, является ли класс подклассом указанного класса или
        кортежа классов.

* Функции для работы с модулями:
    - import(name, globals=None, locals=None, fromlist=(), level=0): Импортирует модуль.

* Встроенные константы:
    - None: Представляет отсутствие значения.
    - True и False: Логические значения.
    - Ellipsis: Представляет многоточие (...), используется в срезах.



    12. Литералы

* Литерал в Python (как и в других языках программирования) — это конкретное фиксированное значение,
которое используется в программе напрямую (в отличие от переменной). Литералы представляют собой
значения, записанные в коде, которые не изменяются в процессе выполнения программы.

В Python существует несколько типов литералов в соответствии с типами значений.

Примеры использования литералов в Python:
"""
print('\n12. Литералы')

# 1) Числовые литералы

# Целые числа: 10, -5, 0
a = 10

# Числа с плавающей точкой: 3.14, -0.001, 2.0
b = 3.14

# Комплексные числа: 1+2j, -3-4j
c = 1 + 2j

print(a, b, c) # 10 3.14 (1 + 2j)

# 2) Строковые литералы

# Строки в одинарных кавычках: 'Alice', 'world'
name = 'Alice'

# Строки в двойных кавычках: "Hello world!"
greeting = "Hello, World!"

# Многострочный текст в тройных кавычках: '''Hello! I'm Bob.''', """  """
text = '''Hello! I'm Bob.'''

print(name, greeting, text) # Alice Hello, World! Hello! I'm Bob.

# 3) Булевы литералы True, False

is_valid = True
not_valid = False

print(is_valid, not_valid) # True False

# 4) Литерал None, представляет отсутствие значения или "ничто": None

result = None
print(result) # None

# 5) Списки, кортежи и словари c конкретными значениями

# Литерал списка или списочный литерал [1, 2, 3, 4], ['a', 'b', 'c']
my_list = [1, 2, 3, 4]

# Литерал кортежа или кортежный литерал (1, 2, 3, 4), ('a', 'b', 'c')
my_tuple = (1, 2, 3, 4)

# Литерал словаря или словарный литерал {'name': 'Alice', 'age': 30}
my_dict = {'name': 'Alice', 'age': 30}

print(my_list, my_tuple, my_dict) # [1, 2, 3, 4] (1, 2, 3, 4) {'name': 'Alice', 'age': 30}
"""



    Заключение

В этой главе мы рассмотрели ключевые понятия Python, включая классы, объекты, методы и атрибуты, а
также функции и модули. Понимание этих фундаментальных элементов позволяет создавать более сложные и
правильно структурированные программы.

Освоение материала этой главы закладывает прочную основу для дальнейшего изучения Python и
разработки сложных приложений.

Определения основных понятий и ссылки на глоссарий на официальном сайте и на сайте с русской версией
документации смотри p1_Definitions.txt



    Приложения к Главе 2

Задания для самостоятельной работы:

1) Создайте класс Book с атрибутами title, author, и year. Затем создайте объект этого класса и
выведите его атрибуты.

Ваш код сохраните в файле:
p2_0_key_concepts_p_1.py

Код с решением сохранен в файле:
p2_0_key_concepts_p_1_sol.py

2) Создайте класс Student с атрибутом класса school_name и атрибутами объекта name и grade.
Поменяйте атрибут класса через класс и через объект. Проверьте изменения.

Ваш код - p2_0_key_concepts_p_2.py, решение - p2_0_key_concepts_p_2_sol.py

3) Напишите функцию multiply(a, b), которая принимает два аргумента и возвращает их произведение.
Вызовите функцию с несколькими наборами аргументов.

Ваш код - p2_0_key_concepts_p_3.py, решение - p2_0_key_concepts_p_3_sol.py

4) Напишите функцию greet, которая возвращает строку "Hello!". Добавьте атрибут description к
функции greet() и присвойте ему строку "This function greets the user". Выведите значение этого
атрибута.

Ваш код - p2_0_key_concepts_p_4.py, решение - p2_0_key_concepts_p_4_sol.py

5) Создайте переменные с использованием числовых, строковых, булевых и списочных литералов. Выведите
их значения и типы данных.

Ваш код - p2_0_key_concepts_p_5.py, решение - p2_0_key_concepts_p_5_sol.py
"""
